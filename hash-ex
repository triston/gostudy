/*
* 生成hash的函数示例，同时学习一下自定义函数类型的使用，类似与面向对象的继承关系。
*/

package main

import (
	"fmt"
	"strconv"
)

type GenHash func(str string) string

//从Robert Sedgwicks的 Algorithms in C一书中得到了
func RSHash() GenHash {

	var a int64 = 378551
	var b int64 = 63689
	var hash int64

	return func(str string) string {
		for i := 0; i < len(str); i++ {
			hash = hash*a + int64(str[i])
			a = a * b
		}
		return strconv.FormatInt(hash, 10)
	}
}

//PJW
//该散列算法是基于贝尔实验室的彼得J温伯格的的研究。
//在Compilers一书中（原则，技术和工具），建议采用这个算法的散列函数的哈希方法。
func PJWHash() GenHash {
	var bitsInUnsignedInt int64 = (int64)(4 * 8)
	var threeQuarters int64 = int64((bitsInUnsignedInt * 3) / 4)
	var oneEight int64 = int64(bitsInUnsignedInt / 8)
	var highBits int64 = int64(0XFFFFFFFF) << uint64((bitsInUnsignedInt - oneEight))

	return func(str string) string {
		var hash int64 = 0
		var test int64 = 0

		for i := 0; i < len(str); i++ {
			hash = (hash << uint64(oneEight)) + int64(str[i])
			if test = hash & highBits; test != 0 {
				hash = ((hash ^ (test >> uint64(threeQuarters))) & (^highBits))
			}
		}
		return strconv.FormatInt(hash, 10)
	}

}

func PrintHash(h GenHash, s string) {

	fmt.Printf("Hash Result: %s\n", h(s))
}

func main() {
	s := "hello world!"

	PrintHash(RSHash(), s)
	PrintHash(PJWHash(), s)

	// rsHash := RSHash()
	// fmt.Printf("RSHash Result: %s\n", rsHash(s))

	// pjwHash := PJWHash()
	// fmt.Printf("PJWHash Result: %s\n", pjwHash(s))

}
